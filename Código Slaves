Código (Slave-Unos)

#include <SPI.h>
#include <SD.h>
#include <Adafruit_GFX.h>
#include <MCUFRIEND_kbv.h>

MCUFRIEND_kbv tft;

#if defined(ESP32)
#define SD_CS     5
#else
#define SD_CS     10
#endif

#define PALETTEDEPTH   0

// === Lista dos arquivos BMP ===
const char* animalFiles[] = {
  "/gato.bmp",    // g
  "/baleia.bmp",  // b
  "/cobra.bmp",   // c
  "/ovelha.bmp",  // o
  "/pinto.bmp",   // p
  "/porco.bmp",   // r
  "/sapo.bmp",    // s
  "/tigre.bmp",   // t
  "/parabens.bmp" // z
};

// === Lista dos comandos correspondentes ===
const char comandos[] = {'g', 'b', 'c', 'o', 'p', 'r', 's', 't', 'z'};
const int animalCount = sizeof(animalFiles) / sizeof(animalFiles[0]);

// === Funções auxiliares para leitura de BMP ===
#define BMPIMAGEOFFSET 54
#define BUFFPIXEL      20

uint16_t read16(File& f) {
  uint16_t result;
  f.read((uint8_t*)&result, sizeof(result));
  return result;
}

uint32_t read32(File& f) {
  uint32_t result;
  f.read((uint8_t*)&result, sizeof(result));
  return result;
}

uint8_t showBMP(char *nm, int x, int y) {
  File bmpFile;
  int bmpWidth, bmpHeight;
  uint8_t bmpDepth;
  uint32_t bmpImageoffset;
  uint32_t rowSize;
  uint8_t sdbuffer[3 * BUFFPIXEL];
  uint16_t lcdbuffer[(1 << PALETTEDEPTH) + BUFFPIXEL], *palette = NULL;
  uint8_t bitmask, bitshift;
  boolean flip = true;
  int w, h, row, col, lcdbufsiz = (1 << PALETTEDEPTH) + BUFFPIXEL, buffidx;
  uint32_t pos;
  boolean is565 = false;
  uint16_t bmpID;
  uint16_t n;
  uint8_t ret;

  if ((x >= tft.width()) || (y >= tft.height())) return 1;

  bmpFile = SD.open(nm);
  if (!bmpFile) return 2;

  bmpID = read16(bmpFile);
  (void) read32(bmpFile);
  (void) read32(bmpFile);
  bmpImageoffset = read32(bmpFile);
  (void) read32(bmpFile);
  bmpWidth = read32(bmpFile);
  bmpHeight = read32(bmpFile);
  n = read16(bmpFile);
  bmpDepth = read16(bmpFile);
  pos = read32(bmpFile);

  if (bmpID != 0x4D42) ret = 2;
  else if (n != 1) ret = 3;
  else if (pos != 0 && pos != 3) ret = 4;
  else if (bmpDepth < 16 && bmpDepth > PALETTEDEPTH) ret = 5;
  else {
    bool first = true;
    is565 = (pos == 3);
    rowSize = (bmpWidth * bmpDepth / 8 + 3) & ~3;
    if (bmpHeight < 0) {
      bmpHeight = -bmpHeight;
      flip = false;
    }

    // Inverte a orientação caso a imagem saia invertida
    // Descomente a linha abaixo se precisar forçar a inversão vertical:
    // flip = !flip;

    w = bmpWidth;
    h = bmpHeight;
    if ((x + w) >= tft.width())  w = tft.width() - x;
    if ((y + h) >= tft.height()) h = tft.height() - y;

    if (bmpDepth <= PALETTEDEPTH) {
      bmpFile.seek(bmpImageoffset - (4 << bmpDepth));
      bitmask = 0xFF;
      if (bmpDepth < 8)  bitmask >>= bmpDepth;
      bitshift = 8 - bmpDepth;
      n = 1 << bmpDepth;
      lcdbufsiz -= n;
      palette = lcdbuffer + lcdbufsiz;
      for (col = 0; col < n; col++) {
        pos = read32(bmpFile);
        palette[col] = ((pos & 0x0000F8) >> 3) | ((pos & 0x00FC00) >> 5) | ((pos & 0xF80000) >> 8);
      }
    }

    tft.setAddrWindow(x, y, x + w - 1, y + h - 1);
    for (row = 0; row < h; row++) {
      uint8_t r, g, b;
      int lcdidx, lcdleft;

      if (flip) pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
      else      pos = bmpImageoffset + row * rowSize;

      if (bmpFile.position() != pos) {
        bmpFile.seek(pos);
        buffidx = sizeof(sdbuffer);
      }

      for (col = 0; col < w;) {
        lcdleft = w - col;
        if (lcdleft > lcdbufsiz) lcdleft = lcdbufsiz;
        for (lcdidx = 0; lcdidx < lcdleft; lcdidx++) {
          uint16_t color;
          if (buffidx >= sizeof(sdbuffer)) {
            bmpFile.read(sdbuffer, sizeof(sdbuffer));
            buffidx = 0;
            r = 0;
          }
          switch (bmpDepth) {
            case 32:
            case 24:
              b = sdbuffer[buffidx++];
              g = sdbuffer[buffidx++];
              r = sdbuffer[buffidx++];
              if (bmpDepth == 32) buffidx++;
              color = tft.color565(r, g, b);
              break;
            case 16:
              b = sdbuffer[buffidx++];
              r = sdbuffer[buffidx++];
              color = is565 ? (r << 8) | b : (r << 9) | ((b & 0xE0) << 1) | (b & 0x1F);
              break;
            default:
              if (r == 0) {
                b = sdbuffer[buffidx++];
                r = 8;
              }
              color = palette[(b >> bitshift) & bitmask];
              r -= bmpDepth;
              b <<= bmpDepth;
          }
          lcdbuffer[lcdidx] = color;
        }
        tft.pushColors(lcdbuffer, lcdidx, first);
        first = false;
        col += lcdidx;
      }
    }
    tft.setAddrWindow(0, 0, tft.width() - 1, tft.height() - 1);
    ret = 0;
  }
  bmpFile.close();
  return ret;
}

void setup() {
  uint16_t ID;
  Serial.begin(9600);
  Serial.println("===== COMANDOS DISPONÍVEIS =====");
  Serial.println("g = Gato | b = Baleia | c = Cobra | o = Ovelha | p = Pintinho");
  Serial.println("r = Porco | s = Sapo | t = Tigre | z = Parabéns | x = Limpar tela");
  Serial.println("=================================");
  
  ID = tft.readID();
  if (ID == 0x0D3D3) ID = 0x9481;
  tft.begin(ID);
  // Ajusta rotação da tela se as imagens saírem invertidas
  tft.setRotation(0);  
  tft.fillScreen(0x0000);

  if (!SD.begin(SD_CS)) {
    Serial.println(F("Falha ao iniciar o cartão SD"));
    while (1);
  }
}

void loop() {
  if (Serial.available() > 0) {
    char comando = Serial.read();

    if (comando == 'x') {
      tft.fillScreen(0x0000);
      Serial.println("Tela limpa.");
      return;
    }

    bool encontrado = false;
    for (int i = 0; i < animalCount; i++) {
      if (comando == comandos[i]) {
        const char* filename = animalFiles[i];
        Serial.print("Exibindo: ");
        Serial.println(filename);

        tft.fillScreen(0x0000);
        uint8_t ret = showBMP((char*)filename, 5, 5);
        if (ret != 0) {
          Serial.print("Erro ao exibir BMP. Código: ");
          Serial.println(ret);
        }
        encontrado = true;
        break;
      }
    }

    if (!encontrado) {
      Serial.println("Comando inválido.");
    }
  }
}
